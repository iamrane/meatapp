{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/iamrane/Private/meatapp/components/SearchResult.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useQuery } from \"react-apollo\";\nimport { useField } from \"formik\";\nimport { motion } from \"framer-motion\";\nimport uniqBy from \"lodash/uniqBy\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { getMeatsQuery } from \"gql\";\n\nvar SearchResult = function SearchResult(props) {\n  var _useField = useField(\"searchString\"),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  var meatName = meta.value;\n\n  var _useQuery = useQuery(getMeatsQuery),\n      data = _useQuery.data,\n      loading = _useQuery.loading;\n\n  if (meatName.length < 2) {\n    return null;\n  }\n\n  if (loading) {\n    return null;\n  }\n\n  var filterName = data.allMeats.filter(function (meat) {\n    return meat.meatName.toLowerCase().includes(meatName.toLowerCase());\n  });\n  var filterTags = data.allMeats.filter(function (meat) {\n    return meat.meatGroup.toLowerCase().includes(meatName.toLowerCase());\n  });\n  var result = uniqBy([].concat(_toConsumableArray(filterName), _toConsumableArray(filterTags)), \"meatName\");\n\n  if (isEmpty(result)) {\n    return null;\n  }\n\n  return __jsx(motion.div, {\n    transition: {\n      staggerChildren: 0.07,\n      delayChildren: 0.2\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, result.map(function (meat) {\n    return __jsx(motion.div, {\n      className: \"text-white\",\n      key: meat.meatName,\n      initial: {\n        y: -50\n      },\n      animate: {\n        y: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, meat.meatName);\n  }));\n};\n\nSearchResult.propTypes = {};\nexport default SearchResult;","map":{"version":3,"sources":["/Users/iamrane/Private/meatapp/components/SearchResult.js"],"names":["React","PropTypes","useQuery","useField","motion","uniqBy","isEmpty","getMeatsQuery","SearchResult","props","field","meta","meatName","value","data","loading","length","filterName","allMeats","filter","meat","toLowerCase","includes","filterTags","meatGroup","result","staggerChildren","delayChildren","map","y","propTypes"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,aAAT,QAA8B,KAA9B;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAAA,kBACNN,QAAQ,CAAC,cAAD,CADF;AAAA;AAAA,MACrBO,KADqB;AAAA,MACdC,IADc;;AAAA,MAEbC,QAFa,GAEAD,IAFA,CAEpBE,KAFoB;;AAAA,kBAIFX,QAAQ,CAACK,aAAD,CAJN;AAAA,MAIpBO,IAJoB,aAIpBA,IAJoB;AAAA,MAIdC,OAJc,aAIdA,OAJc;;AAK5B,MAAIH,QAAQ,CAACI,MAAT,GAAkB,CAAtB,EAAyB;AACvB,WAAO,IAAP;AACD;;AAED,MAAID,OAAJ,EAAa;AACX,WAAO,IAAP;AACD;;AAED,MAAME,UAAU,GAAGH,IAAI,CAACI,QAAL,CAAcC,MAAd,CAAqB,UAAAC,IAAI;AAAA,WAC1CA,IAAI,CAACR,QAAL,CAAcS,WAAd,GAA4BC,QAA5B,CAAqCV,QAAQ,CAACS,WAAT,EAArC,CAD0C;AAAA,GAAzB,CAAnB;AAIA,MAAME,UAAU,GAAGT,IAAI,CAACI,QAAL,CAAcC,MAAd,CAAqB,UAAAC,IAAI;AAAA,WAC1CA,IAAI,CAACI,SAAL,CAAeH,WAAf,GAA6BC,QAA7B,CAAsCV,QAAQ,CAACS,WAAT,EAAtC,CAD0C;AAAA,GAAzB,CAAnB;AAIA,MAAMI,MAAM,GAAGpB,MAAM,8BAAKY,UAAL,sBAAoBM,UAApB,IAAiC,UAAjC,CAArB;;AAEA,MAAIjB,OAAO,CAACmB,MAAD,CAAX,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED,SACE,MAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,UAAU,EAAE;AAAEC,MAAAA,eAAe,EAAE,IAAnB;AAAyBC,MAAAA,aAAa,EAAE;AAAxC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,MAAM,CAACG,GAAP,CAAW,UAAAR,IAAI,EAAI;AAClB,WACE,MAAC,MAAD,CAAQ,GAAR;AACE,MAAA,SAAS,EAAC,YADZ;AAEE,MAAA,GAAG,EAAEA,IAAI,CAACR,QAFZ;AAGE,MAAA,OAAO,EAAE;AAAEiB,QAAAA,CAAC,EAAE,CAAC;AAAN,OAHX;AAIE,MAAA,OAAO,EAAE;AAAEA,QAAAA,CAAC,EAAE;AAAL,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGT,IAAI,CAACR,QANR,CADF;AAUD,GAXA,CADH,CADF;AAgBD,CA3CD;;AA6CAJ,YAAY,CAACsB,SAAb,GAAyB,EAAzB;AAEA,eAAetB,YAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useQuery } from \"react-apollo\";\nimport { useField } from \"formik\";\nimport { motion } from \"framer-motion\";\nimport uniqBy from \"lodash/uniqBy\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { getMeatsQuery } from \"gql\";\n\nconst SearchResult = props => {\n  const [field, meta] = useField(\"searchString\");\n  const { value: meatName } = meta;\n\n  const { data, loading } = useQuery(getMeatsQuery);\n  if (meatName.length < 2) {\n    return null;\n  }\n\n  if (loading) {\n    return null;\n  }\n\n  const filterName = data.allMeats.filter(meat =>\n    meat.meatName.toLowerCase().includes(meatName.toLowerCase())\n  );\n\n  const filterTags = data.allMeats.filter(meat =>\n    meat.meatGroup.toLowerCase().includes(meatName.toLowerCase())\n  );\n\n  const result = uniqBy([...filterName, ...filterTags], \"meatName\");\n\n  if (isEmpty(result)) {\n    return null;\n  }\n\n  return (\n    <motion.div transition={{ staggerChildren: 0.07, delayChildren: 0.2 }}>\n      {result.map(meat => {\n        return (\n          <motion.div\n            className=\"text-white\"\n            key={meat.meatName}\n            initial={{ y: -50 }}\n            animate={{ y: 0 }}\n          >\n            {meat.meatName}\n          </motion.div>\n        );\n      })}\n    </motion.div>\n  );\n};\n\nSearchResult.propTypes = {};\n\nexport default SearchResult;\n"]},"metadata":{},"sourceType":"module"}