{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/iamrane/Private/meatapp/components/SearchResult.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useField } from 'formik';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport uniqBy from 'lodash/uniqBy';\nimport isEmpty from 'lodash/isEmpty';\nimport { getMeatsQuery } from 'gql';\nimport SearchResultItem from 'components/SearchResultItem';\nconst variants = {\n  initial: {},\n  reveal: {\n    transition: {\n      staggerChildren: 0.05\n    }\n  }\n};\n\nconst SearchResult = props => {\n  const [field, meta] = useField('searchString');\n  const {\n    value: meatName\n  } = meta;\n  const {\n    data,\n    loading\n  } = useQuery(getMeatsQuery);\n\n  if (!meatName || loading) {\n    return null;\n  }\n\n  const filterName = data.allMeats.filter(meat => meat.meatName.toLowerCase().includes(meatName.toLowerCase()));\n  const filterTags = data.allMeats.filter(meat => meat.meatGroup.toLowerCase().includes(meatName.toLowerCase()));\n  const result = uniqBy([...filterName, ...filterTags], 'meatName');\n\n  if (isEmpty(result)) {\n    return null;\n  }\n\n  return __jsx(motion.div, {\n    variants: variants,\n    initial: \"initial\",\n    animate: \"reveal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, result.map(meat => {\n    return __jsx(SearchResultItem, _extends({\n      key: meat.id\n    }, meat, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }));\n  }));\n};\n\nSearchResult.propTypes = {};\nexport default SearchResult;","map":{"version":3,"sources":["/Users/iamrane/Private/meatapp/components/SearchResult.js"],"names":["React","PropTypes","useQuery","useField","motion","AnimatePresence","uniqBy","isEmpty","getMeatsQuery","SearchResultItem","variants","initial","reveal","transition","staggerChildren","SearchResult","props","field","meta","value","meatName","data","loading","filterName","allMeats","filter","meat","toLowerCase","includes","filterTags","meatGroup","result","map","id","propTypes"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SAASC,MAAT,EAAiBC,eAAjB,QAAwC,eAAxC;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,aAAT,QAA8B,KAA9B;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AAEA,MAAMC,QAAQ,GAAG;AAChBC,EAAAA,OAAO,EAAE,EADO;AAEhBC,EAAAA,MAAM,EAAE;AACPC,IAAAA,UAAU,EAAE;AAAEC,MAAAA,eAAe,EAAE;AAAnB;AADL;AAFQ,CAAjB;;AAOA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC7B,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBf,QAAQ,CAAC,cAAD,CAA9B;AACA,QAAM;AAAEgB,IAAAA,KAAK,EAAEC;AAAT,MAAsBF,IAA5B;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBpB,QAAQ,CAACM,aAAD,CAAlC;;AAEA,MAAI,CAACY,QAAD,IAAaE,OAAjB,EAA0B;AACzB,WAAO,IAAP;AACA;;AAED,QAAMC,UAAU,GAAGF,IAAI,CAACG,QAAL,CAAcC,MAAd,CAAqBC,IAAI,IAAIA,IAAI,CAACN,QAAL,CAAcO,WAAd,GAA4BC,QAA5B,CAAqCR,QAAQ,CAACO,WAAT,EAArC,CAA7B,CAAnB;AACA,QAAME,UAAU,GAAGR,IAAI,CAACG,QAAL,CAAcC,MAAd,CAAqBC,IAAI,IAAIA,IAAI,CAACI,SAAL,CAAeH,WAAf,GAA6BC,QAA7B,CAAsCR,QAAQ,CAACO,WAAT,EAAtC,CAA7B,CAAnB;AACA,QAAMI,MAAM,GAAGzB,MAAM,CAAC,CAAC,GAAGiB,UAAJ,EAAgB,GAAGM,UAAnB,CAAD,EAAiC,UAAjC,CAArB;;AAEA,MAAItB,OAAO,CAACwB,MAAD,CAAX,EAAqB;AACpB,WAAO,IAAP;AACA;;AAED,SACC,MAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,QAAQ,EAAErB,QAAtB;AAAgC,IAAA,OAAO,EAAC,SAAxC;AAAkD,IAAA,OAAO,EAAC,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEqB,MAAM,CAACC,GAAP,CAAWN,IAAI,IAAI;AACnB,WAAO,MAAC,gBAAD;AAAkB,MAAA,GAAG,EAAEA,IAAI,CAACO;AAA5B,OAAoCP,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACA,GAFA,CADF,CADD;AAOA,CAxBD;;AA0BAX,YAAY,CAACmB,SAAb,GAAyB,EAAzB;AAEA,eAAenB,YAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useField } from 'formik';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport uniqBy from 'lodash/uniqBy';\nimport isEmpty from 'lodash/isEmpty';\nimport { getMeatsQuery } from 'gql';\nimport SearchResultItem from 'components/SearchResultItem';\n\nconst variants = {\n\tinitial: {},\n\treveal: {\n\t\ttransition: { staggerChildren: 0.05 },\n\t},\n};\n\nconst SearchResult = props => {\n\tconst [field, meta] = useField('searchString');\n\tconst { value: meatName } = meta;\n\tconst { data, loading } = useQuery(getMeatsQuery);\n\n\tif (!meatName || loading) {\n\t\treturn null;\n\t}\n\n\tconst filterName = data.allMeats.filter(meat => meat.meatName.toLowerCase().includes(meatName.toLowerCase()));\n\tconst filterTags = data.allMeats.filter(meat => meat.meatGroup.toLowerCase().includes(meatName.toLowerCase()));\n\tconst result = uniqBy([...filterName, ...filterTags], 'meatName');\n\n\tif (isEmpty(result)) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<motion.div variants={variants} initial=\"initial\" animate=\"reveal\">\n\t\t\t{result.map(meat => {\n\t\t\t\treturn <SearchResultItem key={meat.id} {...meat} />;\n\t\t\t})}\n\t\t</motion.div>\n\t);\n};\n\nSearchResult.propTypes = {};\n\nexport default SearchResult;\n"]},"metadata":{},"sourceType":"module"}