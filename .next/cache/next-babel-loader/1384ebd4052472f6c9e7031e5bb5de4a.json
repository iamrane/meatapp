{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/iamrane/Private/meatapp/components/SearchResult.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useField } from 'formik';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport uniqBy from 'lodash/uniqBy';\nimport isEmpty from 'lodash/isEmpty';\nimport { getMeatsQuery } from 'gql';\nimport SearchResultItem from 'components/SearchResultItem';\nvar variants = {\n  initial: {},\n  reveal: {\n    transition: {\n      staggerChildren: 0.1,\n      delayChildren: 0.5\n    }\n  }\n};\n\nvar SearchResult = function SearchResult(props) {\n  var _useField = useField('searchString'),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  var meatName = meta.value;\n\n  var _useQuery = useQuery(getMeatsQuery),\n      data = _useQuery.data,\n      loading = _useQuery.loading;\n\n  if (!meatName || loading) {\n    return null;\n  }\n\n  var filterName = data.allMeats.filter(function (meat) {\n    return meat.meatName.toLowerCase().includes(meatName.toLowerCase());\n  });\n  var filterTags = data.allMeats.filter(function (meat) {\n    return meat.meatGroup.toLowerCase().includes(meatName.toLowerCase());\n  });\n  var result = uniqBy([].concat(_toConsumableArray(filterName), _toConsumableArray(filterTags)), 'meatName');\n\n  if (isEmpty(result)) {\n    return null;\n  }\n\n  return __jsx(motion.div, {\n    variants: variants,\n    initial: \"initial\",\n    animate: \"reveal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, result.map(function (meat) {\n    console.log('meat', meat);\n    return __jsx(SearchResultItem, {\n      key: meat.meatName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }));\n};\n\nSearchResult.propTypes = {};\nexport default SearchResult;","map":{"version":3,"sources":["/Users/iamrane/Private/meatapp/components/SearchResult.js"],"names":["React","PropTypes","useQuery","useField","motion","AnimatePresence","uniqBy","isEmpty","getMeatsQuery","SearchResultItem","variants","initial","reveal","transition","staggerChildren","delayChildren","SearchResult","props","field","meta","meatName","value","data","loading","filterName","allMeats","filter","meat","toLowerCase","includes","filterTags","meatGroup","result","map","console","log","propTypes"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SAASC,MAAT,EAAiBC,eAAjB,QAAwC,eAAxC;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,aAAT,QAA8B,KAA9B;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AAEA,IAAMC,QAAQ,GAAG;AAChBC,EAAAA,OAAO,EAAE,EADO;AAEhBC,EAAAA,MAAM,EAAE;AACPC,IAAAA,UAAU,EAAE;AAAEC,MAAAA,eAAe,EAAE,GAAnB;AAAwBC,MAAAA,aAAa,EAAE;AAAvC;AADL;AAFQ,CAAjB;;AAOA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAAA,kBACPd,QAAQ,CAAC,cAAD,CADD;AAAA;AAAA,MACtBe,KADsB;AAAA,MACfC,IADe;;AAAA,MAEdC,QAFc,GAEDD,IAFC,CAErBE,KAFqB;;AAAA,kBAGHnB,QAAQ,CAACM,aAAD,CAHL;AAAA,MAGrBc,IAHqB,aAGrBA,IAHqB;AAAA,MAGfC,OAHe,aAGfA,OAHe;;AAK7B,MAAI,CAACH,QAAD,IAAaG,OAAjB,EAA0B;AACzB,WAAO,IAAP;AACA;;AAED,MAAMC,UAAU,GAAGF,IAAI,CAACG,QAAL,CAAcC,MAAd,CAAqB,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACP,QAAL,CAAcQ,WAAd,GAA4BC,QAA5B,CAAqCT,QAAQ,CAACQ,WAAT,EAArC,CAAJ;AAAA,GAAzB,CAAnB;AACA,MAAME,UAAU,GAAGR,IAAI,CAACG,QAAL,CAAcC,MAAd,CAAqB,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACI,SAAL,CAAeH,WAAf,GAA6BC,QAA7B,CAAsCT,QAAQ,CAACQ,WAAT,EAAtC,CAAJ;AAAA,GAAzB,CAAnB;AACA,MAAMI,MAAM,GAAG1B,MAAM,8BAAKkB,UAAL,sBAAoBM,UAApB,IAAiC,UAAjC,CAArB;;AAEA,MAAIvB,OAAO,CAACyB,MAAD,CAAX,EAAqB;AACpB,WAAO,IAAP;AACA;;AAED,SACC,MAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,QAAQ,EAAEtB,QAAtB;AAAgC,IAAA,OAAO,EAAC,SAAxC;AAAkD,IAAA,OAAO,EAAC,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEsB,MAAM,CAACC,GAAP,CAAW,UAAAN,IAAI,EAAI;AACnBO,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBR,IAApB;AACA,WAAO,MAAC,gBAAD;AAAkB,MAAA,GAAG,EAAEA,IAAI,CAACP,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACA,GAHA,CADF,CADD;AAQA,CAzBD;;AA2BAJ,YAAY,CAACoB,SAAb,GAAyB,EAAzB;AAEA,eAAepB,YAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useField } from 'formik';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport uniqBy from 'lodash/uniqBy';\nimport isEmpty from 'lodash/isEmpty';\nimport { getMeatsQuery } from 'gql';\nimport SearchResultItem from 'components/SearchResultItem';\n\nconst variants = {\n\tinitial: {},\n\treveal: {\n\t\ttransition: { staggerChildren: 0.1, delayChildren: 0.5 },\n\t},\n};\n\nconst SearchResult = props => {\n\tconst [field, meta] = useField('searchString');\n\tconst { value: meatName } = meta;\n\tconst { data, loading } = useQuery(getMeatsQuery);\n\n\tif (!meatName || loading) {\n\t\treturn null;\n\t}\n\n\tconst filterName = data.allMeats.filter(meat => meat.meatName.toLowerCase().includes(meatName.toLowerCase()));\n\tconst filterTags = data.allMeats.filter(meat => meat.meatGroup.toLowerCase().includes(meatName.toLowerCase()));\n\tconst result = uniqBy([...filterName, ...filterTags], 'meatName');\n\n\tif (isEmpty(result)) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<motion.div variants={variants} initial=\"initial\" animate=\"reveal\">\n\t\t\t{result.map(meat => {\n\t\t\t\tconsole.log('meat', meat);\n\t\t\t\treturn <SearchResultItem key={meat.meatName} />;\n\t\t\t})}\n\t\t</motion.div>\n\t);\n};\n\nSearchResult.propTypes = {};\n\nexport default SearchResult;\n"]},"metadata":{},"sourceType":"module"}