{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/iamrane/Private/meatapp/components/SearchResult.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useQuery } from \"react-apollo\";\nimport { getMeatsQuery } from \"gql\";\nimport uniqBy from \"lodash/uniqBy\";\nimport isEmpty from \"lodash/isEmpty\";\n\nvar SearchResult = function SearchResult(props) {\n  var _useField = useField(\"searchString\"),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  var value = meta.value;\n\n  var _useQuery = useQuery(getMeatsQuery),\n      data = _useQuery.data;\n\n  var filterName = data.allMeats.filter(function (meat) {\n    return meat.meatName.toLowerCase().includes(meatName.toLowerCase());\n  });\n  var filterTags = data.allMeats.filter(function (meat) {\n    return meat.meatGroup.toLowerCase().includes(meatName.toLowerCase());\n  });\n  var result = uniqBy([].concat(_toConsumableArray(filterName), _toConsumableArray(filterTags)), \"meatName\");\n\n  if (isEmpty(result)) {\n    return null;\n  }\n\n  return __jsx(motion.div, {\n    transition: {\n      staggerChildren: 0.07,\n      delayChildren: 0.2\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, result.map(function (meat) {\n    return __jsx(motion.div, {\n      initial: {\n        y: -30\n      },\n      animate: {\n        y: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, meat.meatName);\n  }));\n};\n\nSearchResult.propTypes = {};\nexport default SearchResult;","map":{"version":3,"sources":["/Users/iamrane/Private/meatapp/components/SearchResult.js"],"names":["React","PropTypes","useQuery","getMeatsQuery","uniqBy","isEmpty","SearchResult","props","useField","field","meta","value","data","filterName","allMeats","filter","meat","meatName","toLowerCase","includes","filterTags","meatGroup","result","staggerChildren","delayChildren","map","y","propTypes"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,aAAT,QAA8B,KAA9B;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAAA,kBACNC,QAAQ,CAAC,cAAD,CADF;AAAA;AAAA,MACrBC,KADqB;AAAA,MACdC,IADc;;AAAA,MAEpBC,KAFoB,GAEVD,IAFU,CAEpBC,KAFoB;;AAAA,kBAGXT,QAAQ,CAACC,aAAD,CAHG;AAAA,MAGpBS,IAHoB,aAGpBA,IAHoB;;AAK5B,MAAMC,UAAU,GAAGD,IAAI,CAACE,QAAL,CAAcC,MAAd,CAAqB,UAAAC,IAAI;AAAA,WAC1CA,IAAI,CAACC,QAAL,CAAcC,WAAd,GAA4BC,QAA5B,CAAqCF,QAAQ,CAACC,WAAT,EAArC,CAD0C;AAAA,GAAzB,CAAnB;AAIA,MAAME,UAAU,GAAGR,IAAI,CAACE,QAAL,CAAcC,MAAd,CAAqB,UAAAC,IAAI;AAAA,WAC1CA,IAAI,CAACK,SAAL,CAAeH,WAAf,GAA6BC,QAA7B,CAAsCF,QAAQ,CAACC,WAAT,EAAtC,CAD0C;AAAA,GAAzB,CAAnB;AAIA,MAAMI,MAAM,GAAGlB,MAAM,8BAAKS,UAAL,sBAAoBO,UAApB,IAAiC,UAAjC,CAArB;;AAEA,MAAIf,OAAO,CAACiB,MAAD,CAAX,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED,SACE,MAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,UAAU,EAAE;AAAEC,MAAAA,eAAe,EAAE,IAAnB;AAAyBC,MAAAA,aAAa,EAAE;AAAxC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,MAAM,CAACG,GAAP,CAAW,UAAAT,IAAI,EAAI;AAClB,WACE,MAAC,MAAD,CAAQ,GAAR;AAAY,MAAA,OAAO,EAAE;AAAEU,QAAAA,CAAC,EAAE,CAAC;AAAN,OAArB;AAAiC,MAAA,OAAO,EAAE;AAAEA,QAAAA,CAAC,EAAE;AAAL,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGV,IAAI,CAACC,QADR,CADF;AAKD,GANA,CADH,CADF;AAWD,CA9BD;;AAgCAX,YAAY,CAACqB,SAAb,GAAyB,EAAzB;AAEA,eAAerB,YAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useQuery } from \"react-apollo\";\nimport { getMeatsQuery } from \"gql\";\nimport uniqBy from \"lodash/uniqBy\";\nimport isEmpty from \"lodash/isEmpty\";\n\nconst SearchResult = props => {\n  const [field, meta] = useField(\"searchString\");\n  const { value } = meta;\n  const { data } = useQuery(getMeatsQuery);\n\n  const filterName = data.allMeats.filter(meat =>\n    meat.meatName.toLowerCase().includes(meatName.toLowerCase())\n  );\n\n  const filterTags = data.allMeats.filter(meat =>\n    meat.meatGroup.toLowerCase().includes(meatName.toLowerCase())\n  );\n\n  const result = uniqBy([...filterName, ...filterTags], \"meatName\");\n\n  if (isEmpty(result)) {\n    return null;\n  }\n\n  return (\n    <motion.div transition={{ staggerChildren: 0.07, delayChildren: 0.2 }}>\n      {result.map(meat => {\n        return (\n          <motion.div initial={{ y: -30 }} animate={{ y: 0 }}>\n            {meat.meatName}\n          </motion.div>\n        );\n      })}\n    </motion.div>\n  );\n};\n\nSearchResult.propTypes = {};\n\nexport default SearchResult;\n"]},"metadata":{},"sourceType":"module"}